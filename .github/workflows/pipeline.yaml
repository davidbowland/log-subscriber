name: Pipeline

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_SMS_API_KEY: ${{ secrets.TESTING_SMS_API_KEY }}
  TESTING_STACK_NAME: log-subscriber-test
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dbowland-pipeline-test
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dbowland-cloudformation-test
  TESTING_ARTIFACTS_BUCKET_EAST_1: dbowland-lambda-east-1-test
  TESTING_ARTIFACTS_BUCKET_EAST_2: dbowland-lambda-east-2-test
  TESTING_REGION: ${{ secrets.AWS_REGION }}
  PROD_SMS_API_KEY: ${{ secrets.PROD_SMS_API_KEY }}
  PROD_STACK_NAME: log-subscriber
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dbowland-pipeline
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dbowland-cloudformation
  PROD_ARTIFACTS_BUCKET_EAST_1: dbowland-lambda-east-1
  PROD_ARTIFACTS_BUCKET_EAST_2: dbowland-lambda-east-2
  PROD_REGION: ${{ secrets.AWS_REGION }}
  HUSKY: 0

on: push

permissions:
  contents: write

jobs:
  test:
    name: Run unit tests
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install and audit packages
        run: npm ci && npm audit --audit-level=high
        env:
          NODE_ENV: test
      - name: Run tests
        run: npm run test

  build-and-deploy-feature:
    name: Deploy feature branch
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Build TypeScript into Lambda
        run: npm run build
        env:
          HUSKY: 0
      - run: sam build --template ${SAM_TEMPLATE} --use-container --container-env-var NODE_ENV=production

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the us-east-1 testing account
        shell: bash
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region us-east-1 \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_1} \
            --s3-prefix log-subscriber-test \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "Environment=test PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${TESTING_SMS_API_KEY}"
      - name: Deploy to feature stack in the us-east-2 testing account
        shell: bash
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region us-east-2 \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_2} \
            --s3-prefix log-subscriber-test \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "Environment=test PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${TESTING_SMS_API_KEY}"

  build-and-package:
    name: Build and package lambda
    if: github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Build resources
        run: |
          npm run build
          sam build --template ${SAM_TEMPLATE} --use-container --container-env-var NODE_ENV=production
        env:
          HUSKY: 0

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to east-1 testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_1} \
            --s3-prefix log-subscriber-test \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing-east-1.yaml
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-testing-east-1.yaml
          path: packaged-testing-east-1.yaml
      - name: Upload artifacts to east-2 testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_2} \
            --s3-prefix log-subscriber-test \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing-east-2.yaml
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-testing-east-2.yaml
          path: packaged-testing-east-2.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to east-1 production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET_EAST_1} \
            --s3-prefix log-subscriber \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod-east-1.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-prod-east-1.yaml
          path: packaged-prod-east-1.yaml
      - name: Upload artifacts to east-2 production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET_EAST_2} \
            --s3-prefix log-subscriber \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod-east-2.yaml
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-prod-east-2.yaml
          path: packaged-prod-east-2.yaml

  deploy-testing:
    name: Deploy to test
    if: github.ref == 'refs/heads/master'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v4
        with:
          name: packaged-testing-east-1.yaml
      - uses: actions/download-artifact@v4
        with:
          name: packaged-testing-east-2.yaml

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to us-east-1 testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing-east-1.yaml \
            --capabilities CAPABILITY_IAM \
            --region us-east-1 \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_1} \
            --s3-prefix log-subscriber-test \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "Environment=test PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${TESTING_SMS_API_KEY}"
      - name: Deploy to us-east-2 testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing-east-2.yaml \
            --capabilities CAPABILITY_IAM \
            --region us-east-2 \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET_EAST_2} \
            --s3-prefix log-subscriber-test \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "Environment=test PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${TESTING_SMS_API_KEY}"

  deploy-prod:
    name: Deploy to production
    if: github.ref == 'refs/heads/master'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v4
        with:
          name: packaged-prod-east-1.yaml
      - uses: actions/download-artifact@v4
        with:
          name: packaged-prod-east-2.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to us-east-1 production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod-east-1.yaml \
            --capabilities CAPABILITY_IAM \
            --region us-east-1 \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET_EAST_1} \
            --s3-prefix log-subscriber \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${PROD_SMS_API_KEY}"
      - name: Deploy to us-east-2 production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod-east-2.yaml \
            --capabilities CAPABILITY_IAM \
            --region us-east-2 \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET_EAST_2} \
            --s3-prefix log-subscriber \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "PhoneNumber=${{ secrets.PHONE_NUMBER }} SmsApiKey=${PROD_SMS_API_KEY}"

  bump:
    name: Bump the version number and tag the commit
    needs: deploy-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Set git name and email
        run: |
          git config --local user.email "dbowland1+bot@gmail.com"
          git config --local user.name "github-actions[bot]"
      - name: Bump the minor version
        run: npm version minor
      - name: Push tag created by version bump
        run: git push --follow-tags
